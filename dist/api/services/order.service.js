"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Order = _interopRequireDefault(require("../../models/Order"));
var _Cart = _interopRequireDefault(require("../../models/Cart"));
var _user = _interopRequireDefault(require("./user.service"));
var _product = _interopRequireDefault(require("./product.service"));
var _Product = _interopRequireDefault(require("../../models/Product"));
var _Seller = _interopRequireDefault(require("../../models/Seller"));
var _rapydAPI = _interopRequireDefault(require("./helpers/rapydAPI.service"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class OrderService {
  async fetchAllPaymentMethods(locationInfo) {
    try {
      const resp = await (0, _rapydAPI.default)("GET", `/v1/payment_methods/country?country=${locationInfo.country}&currency=${locationInfo.currency}`);
      return resp.body.data;
    } catch (error) {
      console.error("Error completing request", error);
      throw error;
    }
  }
  async createOrder(uid, checkoutBody) {
    const order = {
      product_id: checkoutBody.product_id,
      size: checkoutBody.size,
      attachedFiles: checkoutBody.attachedFiles.length !== 0 ? checkoutBody.attachedFiles : null,
      user_id: uid,
      status: {
        Ordered: new Date().getTime()
      },
      created_at: new Date().getTime(),
      address: checkoutBody.address
    };
    if (order.attachedFiles === null) {
      order.status["Delivered"] = new Date().getTime();
    }
    const productInfo = await _product.default.getProductById(checkoutBody.product_id);
    const newOrder = await _Order.default.create({
      ...order
    });
    const rapydCheckoutBody = {
      amount: productInfo.price,
      complete_checkout_url: "http://example.com/complete",
      country: checkoutBody.country,
      currency: checkoutBody.currency,
      requested_currency: checkoutBody.currency,
      merchant_reference_id: newOrder._id,
      payment_method_types_include: checkoutBody.paymentMethod
    };
    const result = await (0, _rapydAPI.default)("POST", "/v1/checkout", rapydCheckoutBody);
    newOrder.rapyd_checkout_id = result.body.data.id;
    newOrder.page_expiration = result.body.data.page_expiration * 1000;
    await newOrder.save();
    console.log(result.body.data.id);
    console.log(new Date(result.body.data.page_expiration * 1000).toLocaleString());
    return {
      order: newOrder._id,
      checkout_id: newOrder.rapyd_checkout_id
    };
  }
  async markPaymentComplete(checkoutBody) {
    try {
      const order = await _Order.default.updateOne({
        rapyd_checkout_id: checkoutBody.checkout_id
      }, {
        $set: {
          rapyd_payment_id: checkoutBody.payment_id,
          isPaid: true
        }
      });
      return order;
    } catch (error) {
      console.error("Error completing request", error);
      throw error;
    }
  }
  async createCartOrder(uid, body) {
    const carts = await _user.default.getCart(uid);
    const orders = [];
    for (let i = 0; i < carts.length; i++) {
      const newOrder = await this.createOrder(uid, {
        ...carts[i]["_doc"],
        address: body.address
      });
      orders.push(newOrder._id);
    }
    const cart = await _Cart.default.deleteMany({
      user_id: uid
    });
    return orders;
  }
  async getOrderforSeller(uid) {
    const seller = await _Seller.default.findOne({
      user_id: uid
    });
    const products = seller.products;
    const orders = await _Order.default.find({
      product_id: {
        $in: products
      }
    }).sort({
      created_at: -1
    });
    for (let i = 0; i < orders.length; i++) {
      const product = await _Product.default.findById(orders[i].product_id);
      if (product) orders[i].product_details = product;
    }
    return orders;
  }
  async updateStatus(body) {
    const order = await _Order.default.findById(body.order_id);
    if (body.status === "Confirmed") {
      order.status["Confirmed"] = new Date().getTime();
      // } else if (body.status === "Approved") {
      //   order.status["Delivered"] = new Date().getTime();
    } else if (body.status === "AskedForChange") {
      order.status["AskedForChange"] ? order.status["AskedForChange"].push({
        data: body.Textdata,
        // Text
        date: new Date().getTime(),
        changeStatus: body.changeStatus
      }) : order.status["AskedForChange"] = [{
        data: body.Textdata,
        date: new Date().getTime(),
        changeStatus: body.changeStatus
      }];
      if (body.changeStatus === false) {
        order.status["Delivered"] = new Date().getTime();
      }
    } else if (body.status === "AskedForApprove") {
      order.status["AskedForApprove"] ? order.status["AskedForApprove"].push({
        data: body.ImageData,
        // links of images
        date: new Date().getTime()
      }) : order.status["AskedForApprove"] = [{
        data: body.ImageData,
        date: new Date().getTime()
      }];
    }
    order.markModified("status");
    await order.save();
    return order;
  }
  async getOrderforUser(uid) {
    const orders = await _Order.default.find({
      user_id: uid
    }).sort({
      created_at: -1
    });
    for (let i = 0; i < orders.length; i++) {
      const product = await _Product.default.findById(orders[i].product_id);
      if (product) orders[i].product_details = product;
    }
    return orders;
  }
  async getOrderById(uid, id) {
    const order = await _Order.default.findById(id);
    const product = await _Product.default.findById(order.product_id);
    if (product) order.product_details = product;
    const seller = await _Seller.default.findOne({
      user_id: product.user_id
    });
    if (seller) order.seller_details = seller;
    console.log(order, seller, product);
    if (uid !== order.user_id && uid !== seller.user_id) return null;
    return order;
  }
}
var _default = new OrderService();
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,