"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Product = _interopRequireDefault(require("../../models/Product"));
var _Review = _interopRequireDefault(require("../../models/Review"));
var _Seller = _interopRequireDefault(require("../../models/Seller"));
var _User = _interopRequireDefault(require("../../models/User"));
var _auth = _interopRequireDefault(require("./auth.service"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class ProductServices {
  async createProduct(user_id, product) {
    const seller = await _Seller.default.findOne({
      user_id: user_id
    });
    let search_key = "";
    const length = product.specification ? product.specification.length : 0;
    for (let i = 0; i < length; i++) {
      search_key += product.specification[i].name + " " + product.specification[i].value + " ";
    }
    search_key += product.title;
    const newProduct = await _Product.default.create({
      title: product.title,
      price: product.price,
      specification: product.specification,
      various_size: product.various_size,
      requiredAttachments: product.requiredAttachments ? product.requiredAttachments : null,
      images: product.images,
      user_id: user_id,
      shop_name: seller.shop_name,
      search_key: search_key
    });
    seller.products ? seller.products.push(newProduct._id) : seller.products = [newProduct._id];
    await seller.save();
    return newProduct;
  }
  async addReview(uid, body) {
    const user = await _User.default.findById(uid);
    const review = await _Review.default.create({
      name: user.name,
      product_id: body.product_id,
      star: body.star,
      description: body.description,
      timestamp: new Date().getTime()
    });
    const product = await _Product.default.findById(body.product_id);
    const count = product !== null && product !== void 0 && product.count ? product.count : 0;
    const star = product !== null && product !== void 0 && product.star ? product.star : 0;
    const newStar = (star * count + body.star) / (count + 1);
    await _Product.default.findByIdAndUpdate(body.product_id, {
      star: newStar.toFixed(2),
      count: count + 1
    });
    return review._id;
  }
  async getProductById(id) {
    const product = await _Product.default.findById(id);
    const reviewsOfProduct = await _Review.default.find({
      product_id: id
    });
    try {
      return {
        ...product["_doc"],
        reviews: [...reviewsOfProduct]
      };
    } catch (err) {
      return {
        message: "Product not found"
      };
    }
  }
  async getTopPicks(limit) {
    const products = await _Product.default.find({
      star: {
        $gt: 0
      }
    }).sort({
      star: -1
    }).limit(parseInt(limit));
    return products;
  }
  async getProductSellerid(uid) {
    const seller = await _Seller.default.findOne({
      user_id: uid
    });
    const products = [];
    if (seller) {
      for (let i = 0; i < seller.products.length; i++) {
        const product = await _Product.default.findById(seller.products[i]);
        if (product) products.push(product);
      }
      return products;
    }
    return {
      message: "No user found"
    };
  }
  async searchProduct(keyword) {
    if (keyword.length < 2) return [];
    const keys = keyword.split(" ");
    let top = 0;
    let picks = 0;
    for (let i = 0; i < keys.length; i++) {
      if (keys[i] === "top") top = 1;else if (keys[i] === "pick" || keys[i] === "picks") picks = 1;else if (keys[i] === "toppicks" || keys[i] === "top-picks" || keys[i] === "top-pick") {
        top = 1, picks = 1;
      }
    }
    if (top && picks) {
      return this.getTopPicks(10);
    } else if (top) {
      const products = await _Product.default.aggregate([{
        $search: {
          index: "Search index",
          autocomplete: {
            query: keyword,
            path: "search_key"
          }
        }
      }]).sort({
        star: -1
      }).limit(10);
      return products;
    } else {
      const products = await _Product.default.aggregate([{
        $search: {
          index: "Search index",
          autocomplete: {
            query: keyword,
            path: "search_key"
          }
        }
      }]);
      return products;
    }
  }
}
var _default = new ProductServices();
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,