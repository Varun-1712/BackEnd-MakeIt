"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = makeRapydRequest;
const https = require("https");
const crypto = require("crypto");
const secretKey = "cac7ba6a755a887640c576a92b05242c394eb71a6bef52a8096a67508506973c13fb5a7a8bfd6cfa";
const accessKey = "C22222E36C1B65EA9D74";
const log = false;
async function makeRapydRequest(method, urlPath, body = null) {
  try {
    let httpMethod = method;
    let httpBaseURL = "sandboxapi.rapyd.net";
    let httpURLPath = urlPath;
    let salt = generateRandomString(8);
    let idempotency = new Date().getTime().toString();
    let timestamp = Math.round(new Date().getTime() / 1000);
    let signature = sign(httpMethod, httpURLPath, salt, timestamp, body);
    const options = {
      hostname: httpBaseURL,
      port: 443,
      path: httpURLPath,
      method: httpMethod,
      headers: {
        "Content-Type": "application/json",
        salt: salt,
        timestamp: timestamp,
        signature: signature,
        access_key: accessKey,
        idempotency: idempotency
      }
    };
    return await httpRequest(options, body, log);
  } catch (error) {
    console.error("Error generating request options");
    throw error;
  }
}
function sign(method, urlPath, salt, timestamp, body) {
  try {
    let bodyString = "";
    if (body) {
      bodyString = JSON.stringify(body);
      bodyString = bodyString == "{}" ? "" : bodyString;
    }
    let toSign = method.toLowerCase() + urlPath + salt + timestamp + accessKey + secretKey + bodyString;
    log && console.log(`toSign: ${toSign}`);
    let hash = crypto.createHmac("sha256", secretKey);
    hash.update(toSign);
    const signature = Buffer.from(hash.digest("hex")).toString("base64");
    log && console.log(`signature: ${signature}`);
    return signature;
  } catch (error) {
    console.error("Error generating signature");
    throw error;
  }
}
function generateRandomString(size) {
  try {
    return crypto.randomBytes(size).toString("hex");
  } catch (error) {
    console.error("Error generating salt");
    throw error;
  }
}
async function httpRequest(options, body) {
  return new Promise((resolve, reject) => {
    try {
      let bodyString = "";
      if (body) {
        bodyString = JSON.stringify(body);
        bodyString = bodyString == "{}" ? "" : bodyString;
      }
      log && console.log(`httpRequest options: ${JSON.stringify(options)}`);
      const req = https.request(options, (res, err) => {
        let response = {
          statusCode: res.statusCode,
          headers: res.headers,
          body: ""
        };
        res.on("data", data => {
          response.body += data;
        });
        res.on("end", () => {
          response.body = response.body ? JSON.parse(response.body) : {};
          log && console.log(`httpRequest response: ${JSON.stringify(response)}`);
          if (response.statusCode !== 200) {
            return reject(response);
          }
          return resolve(response);
        });
      });
      req.on("error", error => {
        return reject(error);
      });
      req.write(bodyString);
      req.end();
    } catch (err) {
      return reject(err);
    }
  });
}
exports.makeRequest = makeRapydRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,