"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;
var _authentication = _interopRequireDefault(require("../../services/authentication.service"));
var _auth = _interopRequireDefault(require("../../services/auth.service"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Controller {
  async signup(req, res, next) {
    try {
      const user = await _auth.default.getUserbyEmail(req.body.email);
      if (user) {
        res.status(409).send("User already exists");
        return;
      }
      const newUser = await _auth.default.createUser(req.body);
      const token = _authentication.default.generateToken(newUser._id);
      res.status(201).send(token);
      return;
    } catch (err) {
      res.status(500).send(err);
      next(err);
    }
  }
  async login(req, res, next) {
    const user = await _auth.default.getUserbyEmail(req.body.email);
    if (user) {
      const isValid = await _authentication.default.comparePassword(req.body.password, user.password);
      if (isValid) {
        const token = _authentication.default.generateToken(user._id);
        res.status(200).send(token);
        return;
      } else {
        res.status(401).send("Your password is incorrect");
        return;
      }
    } else {
      res.status(401).send("User not found");
      return;
    }
  }
  async getUserDetails(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const user = await _auth.default.getUser(decoded.id).then(r => {
          r.password = undefined;
          r._id = undefined;
          res.status(200).json(r);
          return r;
        });
      } else {
        res.status(401).end();
      }
    } catch (err) {
      next(err);
    }
  }
}
exports.Controller = Controller;
var _default = new Controller();
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb250cm9sbGVyIiwic2lnbnVwIiwicmVxIiwicmVzIiwibmV4dCIsInVzZXIiLCJBdXRoU2VydmljZSIsImdldFVzZXJieUVtYWlsIiwiYm9keSIsImVtYWlsIiwic3RhdHVzIiwic2VuZCIsIm5ld1VzZXIiLCJjcmVhdGVVc2VyIiwidG9rZW4iLCJhdXRoZW50aWNhdGlvblNlcnZpY2UiLCJnZW5lcmF0ZVRva2VuIiwiX2lkIiwiZXJyIiwibG9naW4iLCJpc1ZhbGlkIiwiY29tcGFyZVBhc3N3b3JkIiwicGFzc3dvcmQiLCJnZXRVc2VyRGV0YWlscyIsImhlYWRlcnMiLCJhdXRob3JpemF0aW9uIiwic3BsaXQiLCJkZWNvZGVkIiwidmVyaWZ5VG9rZW4iLCJpZCIsImdldFVzZXIiLCJ0aGVuIiwiciIsInVuZGVmaW5lZCIsImpzb24iLCJlbmQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zZXJ2ZXIvYXBpL2NvbnRyb2xsZXJzL2F1dGgvY29udHJvbGxlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXV0aGVudGljYXRpb25TZXJ2aWNlIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlXCI7XG5pbXBvcnQgQXV0aFNlcnZpY2UgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2F1dGguc2VydmljZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29udHJvbGxlciB7XG4gIGFzeW5jIHNpZ251cChyZXEsIHJlcywgbmV4dCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgQXV0aFNlcnZpY2UuZ2V0VXNlcmJ5RW1haWwocmVxLmJvZHkuZW1haWwpO1xuICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDkpLnNlbmQoXCJVc2VyIGFscmVhZHkgZXhpc3RzXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBuZXdVc2VyID0gYXdhaXQgQXV0aFNlcnZpY2UuY3JlYXRlVXNlcihyZXEuYm9keSk7XG4gICAgICBjb25zdCB0b2tlbiA9IGF1dGhlbnRpY2F0aW9uU2VydmljZS5nZW5lcmF0ZVRva2VuKG5ld1VzZXIuX2lkKTtcbiAgICAgIHJlcy5zdGF0dXMoMjAxKS5zZW5kKHRva2VuKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5zZW5kKGVycik7XG4gICAgICBuZXh0KGVycik7XG4gICAgfVxuICB9XG4gIGFzeW5jIGxvZ2luKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IEF1dGhTZXJ2aWNlLmdldFVzZXJieUVtYWlsKHJlcS5ib2R5LmVtYWlsKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IGF1dGhlbnRpY2F0aW9uU2VydmljZS5jb21wYXJlUGFzc3dvcmQoXG4gICAgICAgIHJlcS5ib2R5LnBhc3N3b3JkLFxuICAgICAgICB1c2VyLnBhc3N3b3JkXG4gICAgICApO1xuICAgICAgaWYgKGlzVmFsaWQpIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhdXRoZW50aWNhdGlvblNlcnZpY2UuZ2VuZXJhdGVUb2tlbih1c2VyLl9pZCk7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHRva2VuKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDEpLnNlbmQoXCJZb3VyIHBhc3N3b3JkIGlzIGluY29ycmVjdFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXMuc3RhdHVzKDQwMSkuc2VuZChcIlVzZXIgbm90IGZvdW5kXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBhc3luYyBnZXRVc2VyRGV0YWlscyhyZXEsIHJlcywgbmV4dCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0b2tlbiA9IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24uc3BsaXQoXCIgXCIpWzFdO1xuICAgICAgY29uc3QgZGVjb2RlZCA9IGF3YWl0IGF1dGhlbnRpY2F0aW9uU2VydmljZS52ZXJpZnlUb2tlbih0b2tlbik7XG4gICAgICBpZiAoZGVjb2RlZC5pZCkge1xuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgQXV0aFNlcnZpY2UuZ2V0VXNlcihkZWNvZGVkLmlkKS50aGVuKChyKSA9PiB7XG4gICAgICAgICAgci5wYXNzd29yZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByLl9pZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihyKTtcbiAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMuc3RhdHVzKDQwMSkuZW5kKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBuZXh0KGVycik7XG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBuZXcgQ29udHJvbGxlcigpO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQXNEO0FBRS9DLE1BQU1BLFVBQVUsQ0FBQztFQUN0QixNQUFNQyxNQUFNLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUU7SUFDM0IsSUFBSTtNQUNGLE1BQU1DLElBQUksR0FBRyxNQUFNQyxhQUFXLENBQUNDLGNBQWMsQ0FBQ0wsR0FBRyxDQUFDTSxJQUFJLENBQUNDLEtBQUssQ0FBQztNQUM3RCxJQUFJSixJQUFJLEVBQUU7UUFDUkYsR0FBRyxDQUFDTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUNDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztRQUMzQztNQUNGO01BQ0EsTUFBTUMsT0FBTyxHQUFHLE1BQU1OLGFBQVcsQ0FBQ08sVUFBVSxDQUFDWCxHQUFHLENBQUNNLElBQUksQ0FBQztNQUN0RCxNQUFNTSxLQUFLLEdBQUdDLHVCQUFxQixDQUFDQyxhQUFhLENB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