"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;
var _authentication = _interopRequireDefault(require("../../services/authentication.service"));
var _auth = _interopRequireDefault(require("../../services/auth.service"));
var _user = _interopRequireDefault(require("../../services/user.service"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Controller {
  async getUserDetails(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const user = await _auth.default.getUser(decoded.id);
        return res.status(200).json(user);
      } else {
        res.status(401).end();
      }
    } catch (err) {
      next(err);
    }
  }
  async addAddress(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      console.log(req.body);
      if (decoded.id) {
        const address = await _auth.default.addAddress(decoded.id, req.body);
        return res.send("Address added successfully");
      } else {
        res.status(401).end();
      }
    } catch (err) {
      next(err);
    }
  }
  async addToCart(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const cart = await _user.default.addToCart(decoded.id, req.body);
        return res.send(cart._id);
      } else {
        res.status(401).send("Unauthorized");
      }
    } catch (err) {
      next(err);
    }
  }
  async getCart(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const carts = await _user.default.getCart(decoded.id);
        return res.send(carts);
      } else {
        res.status(401).send("Unauthorized");
      }
    } catch (err) {
      next(err);
    }
  }
  async removeFromCart(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const cart = await _user.default.removeFromCart(decoded.id, req.body);
        if (cart) {
          return res.send("Cart removed successfully");
        } else {
          return res.send("Cart not found");
        }
      } else {
        res.status(401).send("Unauthorized");
      }
    } catch (err) {
      next(err);
    }
  }
  async becomeASeller(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const seller = _auth.default.createSeller(decoded.id, req.body);
        return res.send("Seller added successfully");
      } else {
        res.status(401).end();
      }
    } catch (err) {
      next(err);
    }
  }
  async addToWishList(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const wishlist = await _user.default.addToWishList(decoded.id, req.body);
        return res.send("Wishlist added successfully");
      } else {
        res.status(401).send("Unauthorized");
      }
    } catch (err) {
      next(err);
    }
  }
  async removeFromWishlist(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const wishlist = await _user.default.removeWishlist(decoded.id, req.body.product_id);
        await res.status(200).send("Removed Succesfully!");
      } else {
        res.status(401).send("Unauthorized");
      }
    } catch (err) {
      next(err);
    }
  }
  async getWishList(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const wishlist = await _user.default.getWishlist(decoded.id);
        return res.send(wishlist);
      } else {
        res.status(401).send("Unauthorized");
      }
    } catch (err) {
      next(err);
    }
  }
  async moveToWishList(req, res, next) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded.id) {
        const wishlist = await _user.default.moveTowishlist(decoded.id, req.body);
        return await res.status(200).send(wishlist);
      } else {
        res.status(401).send("Unauthorized");
      }
    } catch (err) {
      next(err);
    }
  }
}
exports.Controller = Controller;
var _default = new Controller();
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,