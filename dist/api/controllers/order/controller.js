"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;
var _authentication = _interopRequireDefault(require("../../services/authentication.service"));
var _order = _interopRequireDefault(require("../../services/order.service"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Controller {
  async getAllPaymentMethods(req, res) {
    try {
      const result = await _order.default.fetchAllPaymentMethods(req.body);
      res.status(200).json(result);
    } catch (error) {
      console.error("Error completing request", error);
      res.status(404).json(error);
    }
  }
  async createOrder(req, res) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      const order = await _order.default.createOrder(decoded.id, req.body);
      res.send(order);
    } catch (err) {
      res.status(500).send(err);
    }
  }
  async paymentComplete(req, res) {
    try {
      const result = await _order.default.markPaymentComplete(req.body);
      res.status(200).json(result);
    } catch (error) {
      console.error("Error completing request", error);
      res.status(404).json(error);
    }
  }
  async createCartOrder(req, res) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      const order = await _order.default.createCartOrder(decoded.id, req.body);
      res.status(200).send(order);
    } catch (err) {
      res.status(500).send(err);
    }
  }
  async getOrderforSeller(req, res) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      const orders = await _order.default.getOrderforSeller(decoded.id);
      res.status(200).send(orders);
    } catch (err) {
      res.status(500).send(err);
    }
  }
  async updateStatus(req, res) {
    const order = await _order.default.updateStatus(req.body);
    res.status(200).send(order);
  }
  async getOrderforUser(req, res) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      const orders = await _order.default.getOrderforUser(decoded.id);
      res.status(200).send(orders);
    } catch (err) {
      res.status(500).send(err);
    }
  }
  async getOrderById(req, res) {
    try {
      const token = req.headers.authorization.split(" ")[1];
      const decoded = await _authentication.default.verifyToken(token);
      if (decoded) {
        const order = await _order.default.getOrderById(decoded.id, req.query.order_id);
        if (order !== null) {
          return res.status(200).send(order);
        } else {
          return res.status(404).send("Order not found");
        }
      } else {
        return res.status(401).send({
          message: "Unauthorized"
        });
      }
    } catch (err) {
      return res.status(500).send(err);
    }
  }
}
exports.Controller = Controller;
var _default = new Controller();
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,